What is the Rule of Five?

The Rule of Five in C++ states that if your class defines any one of these special member functions, you should probably explicitly define all five:

Destructor — cleans up resources when an object is destroyed.

Copy constructor — creates a new object as a copy of an existing one.

Copy assignment operator — assigns values from one existing object to another existing object.

Move constructor — efficiently transfers resources from a temporary (rvalue) object to a new object.

Move assignment operator — efficiently transfers resources from a temporary (rvalue) object to an existing object.

Why is the Rule of Five important?
1. Resource Management

If your class manages resources like dynamic memory, file handles, or network connections, these special functions must be carefully written to avoid resource leaks, double frees, or dangling pointers.

2. Avoiding Shallow Copies

The default copy operations do shallow copies (bitwise copy), which can cause multiple objects to share the same resource pointer, leading to undefined behavior when destructors run.

3. Performance Optimization with Move Semantics

Move constructor and move assignment operator enable efficient transfer of resources without copying, improving performance especially when dealing with temporary objects.

4. Consistency and Safety

Implementing all five ensures that your objects behave predictably and safely in all scenarios: copying, assigning, moving, and destroying.

5. Compiler Defaults Aren't Always Enough

If you declare one of these (e.g., destructor or copy constructor), the compiler often suppresses or deletes the others. Explicitly defining all five ensures the class works correctly and avoids surprises.
